// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASEURL_COCKROACH")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  userOnTenant UserOnTenant[]
}

model UserOnTenant {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  assignedAt DateTime @default(now())
  role       String
}

model Tenant {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  slug      String   @db.VarChar(255)
  plan      String   @db.VarChar(255)
  image     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz()

  userOnTenant UserOnTenant[]
  links        Link[]

  @@map("tenant")
}

model Link {
  id          String   @id @default(uuid())
  appLink     String   @default("")
  destination String
  name        String
  publicName  String
  slug        String
  createdAt   DateTime @default(now()) @db.Timestamptz()

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@map("link")
}
